# .github/workflows/ci-cd-sonarcloud.yml
name: CI/CD with SonarCloud

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    name: 🧪 Build
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports: [27017:27017]
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: 🧪 Run backend tests
        working-directory: ./backend
        env:
          MONGO_URL: mongodb://localhost:27017/testdb
        run: npm test || true

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: npm run build

  sonarcloud:
    name: 🔍 SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: "-Dsonar.projectKey=Nihamo_College-Document-Approval-System -Dsonar.organization=nihamo"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk:
    name: 🛡️ Snyk Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 🔐 Install Snyk
        run: npm install -g snyk

      - name: 🔎 Snyk Test Backend
        working-directory: ./backend
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm install
          snyk test
          snyk monitor

      - name: 🔎 Snyk Test Frontend
        working-directory: ./frontend
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm install
          snyk test
          snyk monitor

  docker-build-and-push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test, sonarcloud, snyk]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🛠️ Build Backend Docker image
        working-directory: ./backend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/crassist-backend:latest .

      - name: 🚀 Push Backend Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/crassist-backend:latest

      - name: 🛠️ Build Frontend Docker image
        working-directory: ./frontend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/crassist-frontend:latest .

      - name: 🚀 Push Frontend Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/crassist-frontend:latest

      - name: 🔄 Trigger Render Backend Deploy
        env:
          RENDER_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        if: env.RENDER_URL != ''
        run: curl "$RENDER_URL"

      - name: 🔄 Trigger Netlify Frontend Deploy
        env:
          NETLIFY_URL: ${{ secrets.NETLIFY_DEPLOY_HOOK_URL }}
        if: env.NETLIFY_URL != ''
        run: curl -X POST -d '{}' "$NETLIFY_URL"